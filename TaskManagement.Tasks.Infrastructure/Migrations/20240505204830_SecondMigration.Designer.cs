// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManagement.Tasks.Infrastructure.Contexts;

#nullable disable

namespace TaskManagement.Tasks.Infrastructure.Migrations
{
    [DbContext(typeof(TaskContext))]
    [Migration("20240505204830_SecondMigration")]
    partial class SecondMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskManagement.Tasks.Domain.Entities.Priority", b =>
                {
                    b.Property<Guid>("PriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PriorityDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriorityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PriorityId");

                    b.ToTable("Priority");
                });

            modelBuilder.Entity("TaskManagement.Tasks.Domain.Entities.State", b =>
                {
                    b.Property<Guid>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StateDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StateId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("TaskManagement.Tasks.Domain.Entities.TaskCommets", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<Guid>("TaskItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CommentId");

                    b.HasIndex("TaskItemId");

                    b.ToTable("TaskComments");
                });

            modelBuilder.Entity("TaskManagement.Tasks.Domain.Entities.TaskItem", b =>
                {
                    b.Property<Guid>("TaskItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CompletedTime")
                        .HasPrecision(3, 1)
                        .HasColumnType("float(3)");

                    b.Property<double>("OriginalTimeEstimated")
                        .HasPrecision(3, 1)
                        .HasColumnType("float(3)");

                    b.Property<Guid>("PriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("RemainingTime")
                        .HasPrecision(3, 1)
                        .HasColumnType("float(3)");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TaskItemCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskItemDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<DateTime?>("TaskItemEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TaskItemStart")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TaskItemId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("StateId");

                    b.ToTable("Task", (string)null);
                });

            modelBuilder.Entity("TaskManagement.Tasks.Domain.Entities.TaskCommets", b =>
                {
                    b.HasOne("TaskManagement.Tasks.Domain.Entities.TaskItem", "TaskItem")
                        .WithMany("TaskCommets")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("TaskManagement.Tasks.Domain.Entities.TaskItem", b =>
                {
                    b.HasOne("TaskManagement.Tasks.Domain.Entities.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManagement.Tasks.Domain.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Priority");

                    b.Navigation("State");
                });

            modelBuilder.Entity("TaskManagement.Tasks.Domain.Entities.TaskItem", b =>
                {
                    b.Navigation("TaskCommets");
                });
#pragma warning restore 612, 618
        }
    }
}
